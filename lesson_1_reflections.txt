How did viewing a diff between two versions of a file help you see the bug that was
introduced?

Since the bug couldn't have been introduced in code that didn't change, seeing the
diff was useful so I could only look at the lines that did change.


How could having easy access to the entire history of a file make you a more efficient
programmer in the long term?

See the revisions will help me understand when and why changes were made to the code.


What do you think are the pros and cons of manually choosing when to create a commit,
like you do in Git, vs having versions automatically saved, like Google Docs does?

It's good in that you can group your changes logically into commits. It's bad in that
you have to remember to commit.


Why do you think some version control systems, like Git, allow saving multiple files 
in one commit, while others, like Google Docs, treat each file separately?

In some contexts it makes sense to assume files would be logically connected. In other
contexts, such an assumption cannot be made. It would especially not be a good
assumption to make when the "commits" are automatic.


How can you use the commands git log and git diff to view the history of files?

git log shows you the full history of committed changes to a repository. You can then
see the differences between versions of files in the repository by using git diff
with two commit IDs from the log.


How might using version control make you more confident to make changes that could
break something?

If I break something, I can easily revert back to the version of code prior to the
breakage.


Now that you have your workspace set up, what do you want to try using Git for?

My Udacity web projects.