What happens when you initialize a repository? Why do you need to do it?

The .git subdirectory is created upon initialization. This is needed so git has a place
to store the history of your repository.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is more conceptual than the working directory and repository. It only
includes what you specifically add to it, rather than everything which is in the working
directory and repository. It's valuable because you can use it setup a commit with only
the files you think are logically connected.


How can you use the staging area to make sure you have one commit per logical
change?

By adding all the files for that logical change to the staging area for the commit.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When creating a different version of the project or trying an experimental feature.
The majority of the code is the same, so branching the project makes sense.


How do the diagrams help you visualize the branch structure?

They help me see which commits each branch has in common, and which commits
are specific to a branch.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

When branch A is merged into branch B, the changes from branch A are now present in
branch B. It is represented in the diagram in such a way as to show the work that was
happening in parallel and then merged together.


What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

The primary benefit is less work for the developers when the merge is obvious. Automatic
merging could be dangerous if the changes actually conflict even though the lines that
were changed are not in the same part of the file.